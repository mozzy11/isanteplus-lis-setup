version: '3.3'
services:
# Lab containers
    certs:
        container_name: oe-certs 
        image: ghcr.io/i-tech-uw/certgen:main
        restart: always
        environment:
            - KEYSTORE_PW="kspass"
            - TRUSTSTORE_PW="tspass"
        networks:
            - default
        volumes:
            -  cert-volume:/etc/openelis-global
    database:
        container_name: openelisglobal-database 
        image: postgres:9.5
        ports:
            - "15432:5432"
        restart: always
        env_file:
            - ./volume/database/database.env
        volumes:
              # preserves the database between containers
             - db-data:/var/lib/postgresql/data                
              # files here will run on install
             - ./volume/database/dbInit:/docker-entrypoint-initdb.d
        networks:
            - default
        healthcheck:
            test: [ "CMD", "pg_isready", "-q", "-d", "clinlims", "-U", "clinlims" ]
            timeout: 45s
            interval: 10s
            retries: 10 
            
    oe.openelis.org:
        container_name: openelisglobal-webapp 
        image: ghcr.io/i-tech-uw/openelis-global-2:develop     
        depends_on:
            - database
        ports:
            - "8080:8080"
            - "8443:8443"
        restart: always

        restart: always
        environment:
            - DEFAULT_PW=adminADMIN! 
            - TZ=Africa/Nairobi
              # context.xml doesn't seem to be able to pick up environment variables directly, so we are passing them in as CATALINA_OPTS
            - CATALINA_OPTS= -Ddatasource.url=jdbc:postgresql://database:5432/clinlims -Ddatasource.username=clinlims
        volumes:
            -  cert-volume:/etc/openelis-global
            - ./volume/plugins/:/var/lib/openelis-global/plugins
            - ./volume/tomcat/oe_server.xml:/usr/local/tomcat/conf/server.xml
        secrets:
            - source: datasource.password
            - source: common.properties
            
    fhir.openelis.org:
        container_name: external-fhir-api
        image: hapiproject/hapi:v5.5.1
        # ports:
        #     - "8082:8080"
        #   # - "8444:8443"
        restart: always
        environment:
            - hapi.fhir.auto_create_placeholder_reference_targets=true
            - hapi.fhir.allow_placeholder_references=true
            - hapi.fhir.allow_external_references=true

    fhir.openelis.org.remote:
        container_name: openelis-remote-source
        image: hapiproject/hapi:v5.5.1
        ports:
            - "8081:8080"
          # - "8444:8443"
        restart: always
        environment:
            - hapi.fhir.auto_create_placeholder_reference_targets=true
            - hapi.fhir.allow_placeholder_references=true 
            - hapi.fhir.allow_external_references=true

# isante containers
    isanteplus-lab:
        container_name: isanteplus-lab
        hostname: isanteplus
        image: ghcr.io/isanteplus/docker-isanteplus-server:${ISANTEPLUS_DOCKER_VERSION}
        restart: unless-stopped
        env_file:
            - ./isanteplus.env
        volumes:
            # - /openmrs/data
            - ./custom_modules:/custom_modules
            - ./dist:/openmrs/data/frontend
            - ./volume/ssl/lf.keystore:/ssl/lf.keystore
            - ./volume/ssl/lf.truststore:/ssl/lf.truststore
        logging:
            driver: "json-file"
            options:
                max-size: "10m"
        ports:
            - "8092:8080"
            - "1044:1044"

    isanteplus-mysql-lab:
        image: ghcr.io/isanteplus/docker-isanteplus-db:${ISANTEPLUS_DB_VERSION}
        command: mysqld --character-set-server=utf8 --collation-server=utf8_general_ci --sql_mode=""
        restart: unless-stopped
        container_name: isanteplus-mysql-lab
        hostname: isanteplus-mysql
        healthcheck:
            test: "exit 0"
        environment:
            - MYSQL_DATABASE=openmrs
            - MYSQL_ROOT_PASSWORD=debezium
            - MYSQL_USER=openmrs_user
            - MYSQL_PASSWORD=Admin123
            - MYSQL_ROOT_HOST=% # Allow docker containers to connect to mysql
        volumes:
        #  - ./mysql.cnf:/etc/mysql/conf.d/custom.cnf # mysql config preconfigured to allow binlog/debezium
            - mysql-data:/var/lib/mysql
        # - ./dump:/docker-entrypoint-initdb.d 
        ports:
            - "3308:3306"

secrets:
  datasource.password:
    file: ./volume/properties/datasource.password  
  common.properties:
    file:  ./volume/properties/common.properties  
 
        
volumes:
  db-data:
  cert-volume:
  mysql-data:
       
    
