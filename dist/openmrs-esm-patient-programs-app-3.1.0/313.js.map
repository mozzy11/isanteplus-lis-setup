{"version":3,"file":"313.js","mappings":"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","sources":["webpack://@openmrs/esm-patient-programs-app/./src/programs/programs-overview.component.tsx"],"sourcesContent":["import React from 'react';\nimport dayjs from 'dayjs';\nimport Add16 from '@carbon/icons-react/es/add/16';\nimport styles from './programs-overview.scss';\nimport { formatDate, formatDatetime, usePagination } from '@openmrs/esm-framework';\nimport {\n  DataTable,\n  DataTableSkeleton,\n  Button,\n  InlineLoading,\n  Table,\n  TableCell,\n  TableContainer,\n  TableBody,\n  TableHead,\n  TableHeader,\n  TableRow,\n  InlineNotification,\n} from 'carbon-components-react';\nimport filter from 'lodash-es/filter';\nimport includes from 'lodash-es/includes';\nimport map from 'lodash-es/map';\nimport {\n  CardHeader,\n  EmptyState,\n  ErrorState,\n  PatientChartPagination,\n  launchPatientWorkspace,\n} from '@openmrs/esm-patient-common-lib';\nimport { useTranslation } from 'react-i18next';\nimport { useAvailablePrograms, useEnrollments } from './programs.resource';\n\nconst programsToShowCount = 5;\n\ninterface ProgramsOverviewProps {\n  basePath: string;\n  patientUuid: string;\n}\n\nconst ProgramsOverview: React.FC<ProgramsOverviewProps> = ({ patientUuid, basePath }) => {\n  const { t } = useTranslation();\n  const displayText = t('programs', 'Program enrollments');\n  const headerTitle = t('carePrograms', 'Care Programs');\n  const urlLabel = t('seeAll', 'See all');\n  const pageUrl = window.spaBase + basePath + '/programs';\n\n  const { data: enrollments, isError, isLoading, isValidating } = useEnrollments(patientUuid);\n  const activeEnrollments = enrollments?.filter((enrollment) => !enrollment.dateCompleted);\n\n  const { data: availablePrograms } = useAvailablePrograms();\n\n  const eligiblePrograms = filter(\n    availablePrograms,\n    (program) => !includes(map(enrollments, 'program.uuid'), program.uuid),\n  );\n\n  const { results: paginatedEnrollments, goTo, currentPage } = usePagination(enrollments ?? [], programsToShowCount);\n\n  const launchProgramsForm = React.useCallback(() => launchPatientWorkspace('programs-form-workspace'), []);\n\n  const tableHeaders = [\n    {\n      key: 'display',\n      header: t('activePrograms', 'Active programs'),\n    },\n    {\n      key: 'location',\n      header: t('location', 'Location'),\n    },\n    {\n      key: 'dateEnrolled',\n      header: t('dateEnrolled', 'Date enrolled'),\n    },\n    {\n      key: 'status',\n      header: t('status', 'Status'),\n    },\n  ];\n\n  const tableRows = React.useMemo(() => {\n    return paginatedEnrollments?.map((enrollment) => ({\n      id: enrollment.uuid,\n      display: enrollment.display,\n      location: enrollment.location?.display,\n      dateEnrolled: formatDatetime(new Date(enrollment.dateEnrolled)),\n      status: enrollment.dateCompleted\n        ? `${t('completedOn', 'Completed On')} ${formatDate(new Date(enrollment.dateCompleted))}`\n        : t('active', 'Active'),\n    }));\n  }, [paginatedEnrollments, t]);\n\n  if (isLoading) return <DataTableSkeleton role=\"progressbar\" />;\n  if (isError) return <ErrorState error={isError} headerTitle={headerTitle} />;\n  if (activeEnrollments?.length) {\n    return (\n      <div className={styles.widgetCard}>\n        <CardHeader title={headerTitle}>\n          <span>{isValidating ? <InlineLoading /> : null}</span>\n          <Button\n            kind=\"ghost\"\n            renderIcon={Add16}\n            iconDescription=\"Add programs\"\n            onClick={launchProgramsForm}\n            disabled={availablePrograms?.length && eligiblePrograms?.length === 0}\n          >\n            {t('add', 'Add')}\n          </Button>\n        </CardHeader>\n        <TableContainer>\n          {availablePrograms?.length && eligiblePrograms?.length === 0 && (\n            <InlineNotification\n              style={{ minWidth: '100%', margin: '0rem', padding: '0rem' }}\n              kind={'info'}\n              lowContrast={true}\n              subtitle={t('noEligibleEnrollments', 'There are no more programs left to enroll this patient in')}\n              title={t('fullyEnrolled', 'Enrolled in all programs')}\n            />\n          )}\n          <DataTable rows={tableRows} headers={tableHeaders} isSortable={true} size=\"short\">\n            {({ rows, headers, getHeaderProps, getTableProps }) => (\n              <Table {...getTableProps()} useZebraStyles>\n                <TableHead>\n                  <TableRow>\n                    {headers.map((header) => (\n                      <TableHeader\n                        className={`${styles.productiveHeading01} ${styles.text02}`}\n                        {...getHeaderProps({\n                          header,\n                          isSortable: header.isSortable,\n                        })}\n                      >\n                        {header.header?.content ?? header.header}\n                      </TableHeader>\n                    ))}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {rows.map((row) => (\n                    <TableRow key={row.id}>\n                      {row.cells.map((cell) => (\n                        <TableCell key={cell.id}>{cell.value?.content ?? cell.value}</TableCell>\n                      ))}\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </DataTable>\n        </TableContainer>\n        <PatientChartPagination\n          currentItems={paginatedEnrollments.length}\n          onPageNumberChange={({ page }) => goTo(page)}\n          pageNumber={currentPage}\n          pageSize={programsToShowCount}\n          pageUrl={pageUrl}\n          totalItems={enrollments.length}\n          urlLabel={urlLabel}\n        />\n      </div>\n    );\n  }\n  return <EmptyState displayText={displayText} headerTitle={headerTitle} launchForm={launchProgramsForm} />;\n};\n\nexport default ProgramsOverview;\n"],"names":["patientUuid","basePath","t","useTranslation","displayText","headerTitle","urlLabel","pageUrl","window","spaBase","data","enrollments","isError","isLoading","isValidating","useEnrollments","activeEnrollments","filter","enrollment","dateCompleted","availablePrograms","useAvailablePrograms","eligiblePrograms","program","includes","map","uuid","results","paginatedEnrollments","goTo","currentPage","usePagination","launchProgramsForm","React","launchPatientWorkspace","tableHeaders","key","header","tableRows","id","display","location","dateEnrolled","formatDatetime","Date","status","formatDate","role","ErrorState","error","length","className","styles","CardHeader","title","kind","renderIcon","Add16","iconDescription","onClick","disabled","style","minWidth","margin","padding","lowContrast","subtitle","rows","headers","isSortable","size","getHeaderProps","getTableProps","useZebraStyles","content","row","cells","cell","value","PatientChartPagination","currentItems","onPageNumberChange","page","pageNumber","pageSize","totalItems","EmptyState","launchForm"],"sourceRoot":""}