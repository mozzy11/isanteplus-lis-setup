{"version":3,"file":"236.js","mappings":"0MAQO,SAASA,IACd,OAAOC,EAAAA,EAAAA,IAAO,0BAA0BC,UAGtC,MAAMC,GAAKC,EAAAA,EAAAA,gBACLC,QAAcF,EAAGG,UAAUC,UAEjC,OADAF,EAAMG,MAAK,CAACC,EAAGC,IAAMA,EAAEC,UAAUC,UAAYH,EAAEE,UAAUC,YAClDP,KAIJ,SAASQ,EAAoBC,GAClC,MAAMC,EAAeD,GACjBE,EAAAA,EAAAA,GACEF,EAAUG,KAAKC,IAAD,aAAUA,MAAAA,GAAV,UAAUA,EAAMC,kBAAhB,aAAU,EAAkBC,eAAaC,OAAOC,UAEhE,KAEJ,OAAOrB,EAAAA,EAAAA,KACL,IAAM,CAAC,cAAec,KACtBb,gBACuDqB,QAAQC,IAC3DT,EAAaE,KAAKQ,IAAOC,EAAAA,EAAAA,qBAAoBD,OAEhCR,KAAKU,GAAQA,EAAIC,W,sHCzBtC,MA6BA,EA7B6C,KAC3C,MAAM,EAAEC,IAAMC,EAAAA,EAAAA,mBACR,KAAEF,IAAS5B,EAAAA,EAAAA,KAEjB,OACE,kBAAC,IAAD,CACE+B,OAAQF,EAAE,uCAAwC,mBAClDG,SAAUC,EAAAA,EAAAA,qBAEV,kBAAC,IAAD,CACEF,OAAQF,EACN,+CACA,oBAEFK,WAAYN,EACZO,QAAS,oCAAGP,MAAAA,OAAH,EAAGA,EAAMP,QAAQe,GAAMA,EAAEC,YAAWC,UAE/C,kBAAC,IAAD,CACEP,OAAQF,EACN,8CACA,kBAEFK,WAAYN,EACZO,QAAS,oCAAGP,MAAAA,OAAH,EAAGA,EAAMU","sources":["webpack://@openmrs/esm-offline-tools-app/./src/hooks/offline-actions.ts","webpack://@openmrs/esm-offline-tools-app/./src/offline-actions/offline-actions-overview-card.component.tsx"],"sourcesContent":["import {\n  fetchCurrentPatient,\n  getOfflineDb,\n  SyncItem,\n} from \"@openmrs/esm-framework\";\nimport uniq from \"lodash-es/uniq\";\nimport useSWR from \"swr\";\n\nexport function usePendingSyncItems() {\n  return useSWR(\"offlineActions/pending\", async () => {\n    // TODO: This should be replaced with a function call from esm-offline as accessing the DB directly is dirty.\n    // It also doesn't consider the currently logged-in user atm.\n    const db = getOfflineDb();\n    const items = await db.syncQueue.toArray();\n    items.sort((a, b) => b.createdOn.getTime() - a.createdOn.getTime());\n    return items;\n  });\n}\n\nexport function useSyncItemPatients(syncItems?: Array<SyncItem>) {\n  const patientUuids = syncItems\n    ? uniq(\n        syncItems.map((item) => item?.descriptor?.patientUuid).filter(Boolean)\n      )\n    : null;\n\n  return useSWR(\n    () => [\"patients\", ...patientUuids],\n    async () => {\n      const results: Array<{ data: fhir.Patient }> = await Promise.all(\n        patientUuids.map((id) => fetchCurrentPatient(id))\n      );\n      return results.map((res) => res.data);\n    }\n  );\n}\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport HeaderedQuickInfo from \"../components/headered-quick-info.component\";\nimport OverviewCard from \"../components/overview-card.component\";\nimport { usePendingSyncItems } from \"../hooks/offline-actions\";\nimport { routes } from \"../constants\";\n\nconst OfflineActionsOverviewCard: React.FC = () => {\n  const { t } = useTranslation();\n  const { data } = usePendingSyncItems();\n\n  return (\n    <OverviewCard\n      header={t(\"homeOverviewCardOfflineActionsHeader\", \"Offline actions\")}\n      viewLink={routes.offlineToolsActions}\n    >\n      <HeaderedQuickInfo\n        header={t(\n          \"homeOverviewCardOfflineActionsFailedToUpload\",\n          \"Failed to upload\"\n        )}\n        isLoading={!data}\n        content={<>{data?.filter((x) => x.lastError).length}</>}\n      />\n      <HeaderedQuickInfo\n        header={t(\n          \"homeOverviewCardOfflineActionsPendingUpload\",\n          \"Pending upload\"\n        )}\n        isLoading={!data}\n        content={<>{data?.length}</>}\n      />\n    </OverviewCard>\n  );\n};\n\nexport default OfflineActionsOverviewCard;\n"],"names":["usePendingSyncItems","useSWR","async","db","getOfflineDb","items","syncQueue","toArray","sort","a","b","createdOn","getTime","useSyncItemPatients","syncItems","patientUuids","uniq","map","item","descriptor","patientUuid","filter","Boolean","Promise","all","id","fetchCurrentPatient","res","data","t","useTranslation","header","viewLink","routes","isLoading","content","x","lastError","length"],"sourceRoot":""}