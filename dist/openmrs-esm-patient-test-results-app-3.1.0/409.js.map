{"version":3,"file":"409.js","mappings":"0QAAO,MAAMA,EAAe,GCAfC,EAAgB,CAC3BC,KAAM,eACNC,KAAM,4CACNC,OAAQ,CAAEC,QAAS,EAAGC,KAAM,QAC5BC,MAAO,gBCOHC,EAAoBC,EAAAA,MAEpBC,EAAsB,CAC1B,mBAAoB,SACpBC,MAAO,UAGT,SAASC,KACPC,EAAAA,EAAAA,0BAAyB,CACvBP,KAAM,uBACNQ,QAAU,KAAIC,EAAAA,8BAGhB,MAAMC,EAAa,wCAEbC,EAAU,CACdC,YAAa,uBACbF,WAAAA,GAKF,OAFAG,EAAAA,EAAAA,oBAAmBH,EAAYhB,GAExB,CACLoB,WAAY,CACV,CACEC,GAAI,8BACJlB,KAAM,uCACNmB,MAAO,EACPC,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,2FAAgDP,GAC9EQ,KAAM,CACJC,WAAY,GAEdC,QAAQ,EACRC,SAAS,GAEX,CACEP,GAAI,gCACJlB,KAAMF,EAAcE,KACpBoB,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,mGAAgCP,GAC9DU,QAAQ,EACRC,SAAS,GAEX,CACEP,GAAI,iCACJlB,KAAM,+BACNmB,MAAO,EACPC,MAAMM,EAAAA,EAAAA,mBAAiBC,EAAAA,EAAAA,qBAAoB7B,GAAgBgB,GAC3DQ,KAAMxB,EACN0B,QAAQ,EACRC,SAAS,GAEX,CACEP,GAAI,iCACJlB,KAAM,sCACNoB,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,2FAAkDP,GAChFQ,KAAM,CACJC,WAAY,GAEdC,QAAQ,EACRC,SAAS,O,eCtEjB,IAAIG,EAAM,CACT,YAAa,CACZ,KACA,KAED,YAAa,CACZ,KACA,MAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,KAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMZ,EAAKqB,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,IAClCJ,EAAoBb,KAG7BW,EAAoBW,KAAO,IAAOC,OAAOD,KAAKZ,GAC9CC,EAAoBX,GAAK,KACzBwB,EAAOC,QAAUd","sources":["webpack://@openmrs/esm-patient-test-results-app/./src/config-schema.ts","webpack://@openmrs/esm-patient-test-results-app/./src/dashboard.meta.tsx","webpack://@openmrs/esm-patient-test-results-app/./src/index.ts","webpack://@openmrs/esm-patient-test-results-app//home/runner/work/openmrs-esm-patient-chart/openmrs-esm-patient-chart/packages/esm-patient-test-results-app/translations|lazy|nonrecursive|/.json$/"],"sourcesContent":["export const configSchema = {};\n\nexport interface ConfigObject {}\n","export const dashboardMeta = {\n  name: 'test-results',\n  slot: 'patient-chart-test-results-dashboard-slot',\n  config: { columns: 1, type: 'grid' },\n  title: 'Test Results',\n};\n","import {\n  defineConfigSchema,\n  fhirBaseUrl,\n  getAsyncLifecycle,\n  getSyncLifecycle,\n  messageOmrsServiceWorker,\n} from '@openmrs/esm-framework';\nimport { createDashboardLink } from '@openmrs/esm-patient-common-lib';\nimport { configSchema } from './config-schema';\nimport { dashboardMeta } from './dashboard.meta';\n\nconst importTranslation = require.context('../translations', false, /.json$/, 'lazy');\n\nconst backendDependencies = {\n  'webservices.rest': '^2.2.0',\n  fhir2: '^1.2.0',\n};\n\nfunction setupOpenMRS() {\n  messageOmrsServiceWorker({\n    type: 'registerDynamicRoute',\n    pattern: `.+${fhirBaseUrl}/Observation.+`,\n  });\n\n  const moduleName = '@openmrs/esm-patient-test-results-app';\n\n  const options = {\n    featureName: 'patient-test-results',\n    moduleName,\n  };\n\n  defineConfigSchema(moduleName, configSchema);\n\n  return {\n    extensions: [\n      {\n        id: 'test-results-summary-widget',\n        slot: 'patient-chart-summary-dashboard-slot',\n        order: 2,\n        load: getAsyncLifecycle(() => import('./overview/recent-overview.component'), options),\n        meta: {\n          columnSpan: 4,\n        },\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'test-results-dashboard-widget',\n        slot: dashboardMeta.slot,\n        load: getAsyncLifecycle(() => import('./desktop-view/index'), options),\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'test-results-summary-dashboard',\n        slot: 'patient-chart-dashboard-slot',\n        order: 4,\n        load: getSyncLifecycle(createDashboardLink(dashboardMeta), options),\n        meta: dashboardMeta,\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'test-results-filtered-overview',\n        slot: 'test-results-filtered-overview-slot',\n        load: getAsyncLifecycle(() => import('./overview/external-overview.component'), options),\n        meta: {\n          columnSpan: 4,\n        },\n        online: true,\n        offline: true,\n      },\n    ],\n  };\n}\n\nexport { backendDependencies, importTranslation, setupOpenMRS };\n","var map = {\n\t\"./en.json\": [\n\t\t3574,\n\t\t574\n\t],\n\t\"./fr.json\": [\n\t\t2757,\n\t\t757\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 3979;\nmodule.exports = webpackAsyncContext;"],"names":["configSchema","dashboardMeta","name","slot","config","columns","type","title","importTranslation","require","backendDependencies","fhir2","setupOpenMRS","messageOmrsServiceWorker","pattern","fhirBaseUrl","moduleName","options","featureName","defineConfigSchema","extensions","id","order","load","getAsyncLifecycle","meta","columnSpan","online","offline","getSyncLifecycle","createDashboardLink","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","keys","Object","module","exports"],"sourceRoot":""}