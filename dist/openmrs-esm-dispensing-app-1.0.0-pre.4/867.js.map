{"version":3,"file":"867.js","mappings":"0OAsBO,MAAMA,EAAe,GCPtBC,EAAoBC,EAAAA,KAapBC,EAAsB,CAC1BC,MAAO,SACP,mBAAoB,UAetB,SAASC,IACP,MAAMC,EAAa,8BAEbC,EAAU,CACdC,YAAa,aACbF,WAAAA,GAKF,OAFAG,EAAAA,EAAAA,oBAAmBH,EAAYN,GAExB,CACLU,MAAO,CACL,CACEC,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,sDAAkBL,GAChDM,MAAO,eAGXC,WAAY,M,cC9DhB,IAAIC,EAAM,CACT,YAAa,CACZ,IACA,MAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,KAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMU,EAAKD,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,IAClCJ,EAAoBS,KAG7BX,EAAoBY,KAAO,IAAOC,OAAOD,KAAKb,GAC9CC,EAAoBW,GAAK,IACzBG,EAAOC,QAAUf","sources":["webpack://@openmrs/esm-dispensing-app/./src/config-schema.ts","webpack://@openmrs/esm-dispensing-app/./src/index.ts","webpack://@openmrs/esm-dispensing-app//home/runner/work/openmrs-esm-dispensing/openmrs-esm-dispensing/translations|lazy|nonrecursive|/.json$/"],"sourcesContent":["import { Type, validator } from \"@openmrs/esm-framework\";\n\n/**\n * This is the config schema. It expects a configuration object which\n * looks like this:\n *\n * ```json\n * { \"casualGreeting\": true, \"whoToGreet\": [\"Mom\"] }\n * ```\n *\n * In OpenMRS Microfrontends, all config parameters are optional. Thus,\n * all elements must have a reasonable default. A good default is one\n * that works well with the reference application.\n *\n * To understand the schema below, please read the configuration system\n * documentation:\n *   https://openmrs.github.io/openmrs-esm-core/#/main/config\n * Note especially the section \"How do I make my module configurable?\"\n *   https://openmrs.github.io/openmrs-esm-core/#/main/config?id=im-developing-an-esm-module-how-do-i-make-it-configurable\n * and the Schema Reference\n *   https://openmrs.github.io/openmrs-esm-core/#/main/config?id=schema-reference\n */\nexport const configSchema = {};\n\nexport type Config = {};\n","/**\n * This is the entrypoint file of the application. It communicates the\n * important features of this microfrontend to the app shell. It\n * connects the app shell to the React application(s) that make up this\n * microfrontend.\n */\n\nimport { getAsyncLifecycle, defineConfigSchema } from \"@openmrs/esm-framework\";\nimport { configSchema } from \"./config-schema\";\n\n/**\n * This tells the app shell how to obtain translation files: that they\n * are JSON files in the directory `../translations` (which you should\n * see in the directory structure).\n */\nconst importTranslation = require.context(\n  \"../translations\",\n  false,\n  /.json$/,\n  \"lazy\"\n);\n\n/**\n * This tells the app shell what versions of what OpenMRS backend modules\n * are expected. Warnings will appear if suitable modules are not\n * installed. The keys are the part of the module name after\n * `openmrs-module-`; e.g., `openmrs-module-fhir2` becomes `fhir2`.\n */\nconst backendDependencies = {\n  fhir2: \"^1.2.0\",\n  \"webservices.rest\": \"^2.2.0\",\n};\n\n/**\n * This function performs any setup that should happen at microfrontend\n * load-time (such as defining the config schema) and then returns an\n * object which describes how the React application(s) should be\n * rendered.\n *\n * In this example, our return object contains a single page definition.\n * It tells the app shell that the default export of `greeter.tsx`\n * should be rendered when the route matches `hello`. The full route\n * will be `openmrsSpaBase() + 'hello'`, which is usually\n * `/openmrs/spa/hello`.\n */\nfunction setupOpenMRS() {\n  const moduleName = \"@openmrs/esm-dispensing-app\";\n\n  const options = {\n    featureName: \"dispensing\",\n    moduleName,\n  };\n\n  defineConfigSchema(moduleName, configSchema);\n\n  return {\n    pages: [\n      {\n        load: getAsyncLifecycle(() => import(\"./home\"), options),\n        route: \"dispensing\",\n      },\n    ],\n    extensions: [],\n  };\n}\n\nexport { backendDependencies, importTranslation, setupOpenMRS };\n","var map = {\n\t\"./en.json\": [\n\t\t574,\n\t\t574\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 979;\nmodule.exports = webpackAsyncContext;"],"names":["configSchema","importTranslation","require","backendDependencies","fhir2","setupOpenMRS","moduleName","options","featureName","defineConfigSchema","pages","load","getAsyncLifecycle","route","extensions","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports"],"sourceRoot":""}