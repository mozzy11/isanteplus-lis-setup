{"version":3,"file":"409.js","mappings":"4QAEO,MAAMA,EAAe,CAC1BC,cAAe,CACbC,MAAOC,EAAAA,KAAAA,MACPC,UAAW,CACTC,KAAM,CAAEH,MAAOC,EAAAA,KAAAA,QACfG,SAAU,CAAEJ,MAAOC,EAAAA,KAAAA,SAErBI,SAAU,CAAC,CAAEF,KAAM,MAAOC,SAAU,OCT3BE,EAAgB,CAC3BC,KAAM,iBACNJ,KAAM,6CACNK,OAAQ,CAAEC,QAAS,EAAGC,KAAM,QAC5BC,MAAO,kBCCHC,EAAoBC,EAAAA,MAEpBC,EAAsB,GAE5B,SAASC,IACP,MAAMC,EAAa,yCAEbC,EAAU,CACdC,YAAa,wBACbF,WAAAA,GAKF,OAFAG,EAAAA,EAAAA,oBAAmBH,EAAYlB,GAExB,CACLsB,WAAY,CACV,CACEC,GAAI,iCACJlB,KAAM,uCACNmB,MAAO,GACPC,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,oGAAqEP,GACnGQ,KAAM,CACJC,WAAY,GAEdC,QAAQ,EACRC,SAAS,GAEX,CACEP,GAAI,gCACJlB,KAAMG,EAAcH,KACpBoB,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,oGAAqEP,GACnGU,QAAQ,EACRC,SAAS,GAEX,CACEP,GAAI,uCACJE,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,mGAA6DP,GAC3FQ,KAAM,CACJd,MAAO,qBAETgB,QAAQ,EACRC,SAAS,GAEX,CACEP,GAAI,kCACJlB,KAAM,+BACNmB,MAAO,EACPC,MAAMM,EAAAA,EAAAA,mBAAiBC,EAAAA,EAAAA,qBAAoBxB,GAAgBW,GAC3DQ,KAAMnB,EACNqB,QAAQ,EACRC,SAAS,O,eCvDjB,IAAIG,EAAM,CACT,YAAa,CACZ,KACA,MAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,KAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMZ,EAAKqB,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,IAClCJ,EAAoBb,KAG7BW,EAAoBW,KAAO,IAAOC,OAAOD,KAAKZ,GAC9CC,EAAoBX,GAAK,KACzBwB,EAAOC,QAAUd","sources":["webpack://@openmrs/esm-patient-clinical-view-app/./src/config-schema.ts","webpack://@openmrs/esm-patient-clinical-view-app/./src/dashboard.meta.tsx","webpack://@openmrs/esm-patient-clinical-view-app/./src/index.ts","webpack://@openmrs/esm-patient-clinical-view-app//home/runner/work/openmrs-esm-patient-chart/openmrs-esm-patient-chart/packages/esm-patient-clinical-view-app/translations|lazy|nonrecursive|/.json$/"],"sourcesContent":["import { Type } from '@openmrs/esm-framework';\n\nexport const configSchema = {\n  clinicalViews: {\n    _type: Type.Array,\n    _elements: {\n      slot: { _type: Type.String },\n      slotName: { _type: Type.String },\n    },\n    _default: [{ slot: 'All', slotName: '' }],\n  },\n};\n","export const dashboardMeta = {\n  name: 'clinical-views',\n  slot: 'patient-chart-clinical-view-dashboard-slot',\n  config: { columns: 1, type: 'grid' },\n  title: 'Clinical Views',\n};\n","import { defineConfigSchema, getAsyncLifecycle, getSyncLifecycle } from '@openmrs/esm-framework';\nimport { createDashboardLink } from '@openmrs/esm-patient-common-lib';\nimport { configSchema } from './config-schema';\nimport { dashboardMeta } from './dashboard.meta';\n\nconst importTranslation = require.context('../translations', false, /.json$/, 'lazy');\n\nconst backendDependencies = {};\n\nfunction setupOpenMRS() {\n  const moduleName = '@openmrs/esm-patient-clinical-view-app';\n\n  const options = {\n    featureName: 'patient-clinical-view',\n    moduleName,\n  };\n\n  defineConfigSchema(moduleName, configSchema);\n\n  return {\n    extensions: [\n      {\n        id: 'patient-clinical-view-overview',\n        slot: 'patient-chart-summary-dashboard-slot',\n        order: 11,\n        load: getAsyncLifecycle(() => import('./clinical-view-overview/clinical-view-overview.component'), options),\n        meta: {\n          columnSpan: 4,\n        },\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'patient-clinical-view-details',\n        slot: dashboardMeta.slot,\n        load: getAsyncLifecycle(() => import('./clinical-view-overview/clinical-view-overview.component'), options),\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'patient-clinical-view-form-workspace',\n        load: getAsyncLifecycle(() => import('./clinical-view-form/clinical-view-form.component'), options),\n        meta: {\n          title: 'Add Clinical View',\n        },\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'clinical-view-summary-dashboard',\n        slot: 'patient-chart-dashboard-slot',\n        order: 1,\n        load: getSyncLifecycle(createDashboardLink(dashboardMeta), options),\n        meta: dashboardMeta,\n        online: true,\n        offline: true,\n      },\n    ],\n  };\n}\n\nexport { backendDependencies, importTranslation, setupOpenMRS };\n","var map = {\n\t\"./en.json\": [\n\t\t3574,\n\t\t574\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 3979;\nmodule.exports = webpackAsyncContext;"],"names":["configSchema","clinicalViews","_type","Type","_elements","slot","slotName","_default","dashboardMeta","name","config","columns","type","title","importTranslation","require","backendDependencies","setupOpenMRS","moduleName","options","featureName","defineConfigSchema","extensions","id","order","load","getAsyncLifecycle","meta","columnSpan","online","offline","getSyncLifecycle","createDashboardLink","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","keys","Object","module","exports"],"sourceRoot":""}