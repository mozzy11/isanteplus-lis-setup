"use strict";(self.webpackChunk_openmrs_esm_patient_list_app=self.webpackChunk_openmrs_esm_patient_list_app||[]).push([[191],{5191:(t,e,n)=>{let r;n.d(e,{sY:()=>r,UK:()=>A,yn:()=>a,D_:()=>u,n_:()=>f,kN:()=>d,v9:()=>z,CF:()=>O,HH:()=>U,s_:()=>T,OB:()=>R,sS:()=>k,$g:()=>D,GD:()=>F}),function(t){t[t.SYSTEM=0]="SYSTEM",t[t.USER=1]="USER"}(r||(r={}));var i=n(9035);const a="/ws/rest/v1/cohortm";async function o(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new AbortController;const r=await(0,i.openmrsFetch)(t,{signal:n.signal,method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return r.data}async function s(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new AbortController;const r=await(0,i.openmrsFetch)(t,{signal:n.signal,method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});return r.data}async function c(){let t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new AbortController;const n="custom:(uuid,name,description,display,size,attributes)",o=[["v",n]];if(void 0!==t.name&&""!==t.name&&o.push(["q",t.name]),void 0!==t.isStarred&&o.push(["attribute",`starred:${t.isStarred}`]),void 0!==t.type){const e=t.type===r.SYSTEM?'"Patient List Type":"System"':'"Patient List Type":"My lists"';o.push(["attributes",e])}const s=o.map((t=>{let[e,n]=t;return`${e}=${encodeURIComponent(n)}`})).join("&"),{data:{results:c,error:l}}=await(0,i.openmrsFetch)(`${a}/cohort?${s}`,{signal:e.signal});if(l)throw l;return c}async function l(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new AbortController;return o(`${a}/cohortmember`,t,e)}async function u(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new AbortController;return o(`${a}/cohort/`,{...t,startDate:new Date,groupCohort:!1,definitionHandlerClassname:"org.openmrs.module.cohort.definition.handler.DefaultCohortDefinitionHandler"},e)}async function d(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new AbortController;return o(`${a}/cohort/${t}`,e,n)}async function f(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new AbortController;return s(`${a}/cohort/${t}`,{voidReason:""},e)}var h=n(9590),p=n(1510);const m=`${i.offlineUuidPrefix}l0c4l000-5240-4b9b-b5d6-000000000001`,w=[{id:m,display:"Offline Patients",description:"Patients available while offline.",isStarred:!1,size:0,type:r.USER}];async function y(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};const n=await g(t),r=w.map((t=>{const e=n.find((e=>e.patientListId===t.id));return{...t,isStarred:e?.isStarred??t.isStarred,size:e?.members.length??t.size}}));return r.filter((t=>(void 0===e.name||t.display.toLowerCase().includes(e.name.toLowerCase()))&&(void 0===e.isStarred||t.isStarred===e.isStarred)&&(void 0===e.type||t.type==e.type)))}async function v(t,e,n){C(e);const r=new L,a=await S(t,e,r);a.members.push({id:n}),a.members=(0,p.Z)(a.members,(t=>t.id)),await r.patientListMetadata.put(a),e===m&&(0,i.syncOfflinePatientData)(n)}async function b(t,e,n){C(e);const r=new L,i=await S(t,e,r);i.members=i.members.filter((t=>t.id!==n)),await r.patientListMetadata.put(i)}async function g(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new L;return await e.patientListMetadata.where({userId:t}).toArray()}async function S(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new L;C(e);const r=await n.patientListMetadata.where({userId:t,patientListId:e}).first();if(r)return r;{const r={userId:t,patientListId:e,isStarred:!1,members:[]};return await n.patientListMetadata.put(r),r}}function C(t){const e="string"==typeof t?t:t.id;if(!(0,i.isOfflineUuid)(e))throw new Error("The given patient list is not a device local patient list. It cannot be accessed with this functions.")}class L extends h.ZP{constructor(){var t,e;super("EsmPatientList"),e=void 0,(t="patientListMetadata")in this?Object.defineProperty(this,t,{value:e,enumerable:!0,configurable:!0,writable:!0}):this[t]=e,this.version(2).stores({patientListMetadata:"++id,&[userId+patientListId]"}),this.patientListMetadata=this.table("patientListMetadata")}}async function $(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new AbortController;const r=y(t,e),i=c(e,n).then((t=>t.map(P)));return I(r,i)}function P(t){return{id:t.uuid,display:t.name,description:t.description,type:t.attributes.find((t=>"Patient List Type"===t?.cohortAttributeType?.name))?.value,size:t.size,isStarred:!1}}async function _(t,e,n){const r=async function(t,e){return(await g(t)).filter((t=>t.members.some((t=>t.id===e)))).map((t=>t.patientListId))}(t,e),o=async function(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:new AbortController;const{data:{results:n,error:r}}=await(0,i.openmrsFetch)(`${a}/cohortmember?patient=${t}&v=default`,{signal:e.signal});if(r)throw r;return n.map((t=>t.cohort.uuid))}(e,n);return I(r,o)}function I(){for(var t=arguments.length,e=new Array(t),n=0;n<t;n++)e[n]=arguments[n];return Promise.all(e).then((t=>[].concat.apply([],t)))}function A(t,e){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new AbortController;return(0,i.isOfflineUuid)(e.cohort)?v(t,e.cohort,e.patient):l(e,n)}var E=n(2690),M=n(9857);function T(t,e){return(0,E._)((n=>{let{abortController:r}=n;return t?$(t,e,r):Promise.resolve([])}),[t,e])}function O(t,e){return(0,E._)((async n=>{let{abortController:r}=n;if(!t||!e)return[];const[i,a]=await Promise.all([$(t,void 0,r),_(t,e,r)]);return i.filter((t=>!a.includes(t.id)))}),[t,e])}function U(t){return(0,E._)((async()=>{if(!t)return[];const e=await async function(t,e){return C(e),(await S(t,e)).members??[]}(t,m);return(await Promise.all(e.map((t=>{let{id:e}=t;return(0,i.fetchCurrentPatient)(e)})))).filter(Boolean).map((t=>t.data))}),[t])}function F(){return(0,E.r)(((t,e)=>{let{userId:n,patientListId:r,isStarred:a}=t,{abortController:o}=e;return function(t,e,n,r){if((0,i.isOfflineUuid)(e))return async function(t,e,n){C(e);const r=new L,i={...await S(t,e,r),...n};await r.patientListMetadata.put(i)}(t,e,n)}(n,r,{isStarred:a})}))}function D(){return(0,E.r)((async t=>{let{userId:e,patientUuids:n}=t;if(e)for(const t of n)await b(e,m,t)}))}function R(t){const e=(0,M.ZP)(`${a}/cohort/${t}`,i.openmrsFetch);return{...e,data:e?.data?.data}}function k(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:0,r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:10,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"full";const s=(0,M.ZP)(`${a}/cohortmember?cohort=${t}&startIndex=${n}&limit=${r}&v=${o}&q=${e}`,i.openmrsFetch);return{...s,data:s?.data?.data?.results}}function z(){const t=(0,M.ZP)(`${a}/cohorttype`,i.openmrsFetch);return{...t,data:t?.data?.data?.results}}},2690:(t,e,n)=>{n.d(e,{_:()=>i,r:()=>a});var r=n(9902);function i(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];const n=a(t,e),i=n.refetch;return(0,r.useEffect)((()=>{i().catch((()=>{}))}),e),n}function a(t){let e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[];const n=(0,r.useRef)(new AbortController),i=(0,r.useRef)(!0),[a,o]=(0,r.useState)("idle"),[s,c]=(0,r.useState)(void 0),[l,u]=(0,r.useState)(void 0),d=(0,r.useCallback)((async function(){n.current.abort(),n.current=new AbortController,o((t=>"idle"===t?"loading":"fetching"));try{const e={abortController:n.current},r=0===arguments.length?await t(e):await t(arguments.length<=0?void 0:arguments[0],e);i.current&&(o("success"),c(r),u(void 0))}catch(t){throw i.current&&(o("error"),u(t)),t}}),e);return(0,r.useEffect)((()=>()=>{i.current=!1,n.current.abort()}),[]),{status:a,isIdle:"idle"===a,isLoading:"loading"===a,isFetching:"fetching"===a,isSuccess:"success"===a,isError:"error"===a,data:s,error:l,refetch:d}}}}]);
//# sourceMappingURL=191.js.map