{"version":3,"file":"753.js","mappings":"2QAEcA,EAAAA,EAAAA,mBAAmD,gCAAiC,CAChGC,eAAgB,KCDX,MAAMC,EAAiD,CAC5D,CAACC,EAAAA,0CAA2C,iBCExCC,EAAsB,CAC1B,mBAAoB,UAGhBC,EAAuB,CAC3B,yBAA0BC,mBAGtBC,EAAoBC,EAAAA,MAEpBC,EAAa,gCACbC,EAAU,CACdC,YAAa,eACbF,WAAAA,GAGF,SAASG,IACP,MAAMC,EAAS,eACTC,EAAe,GAAEC,OAAOC,WAAWH,IAgBzC,OCnCAI,EAAAA,EAAAA,+BAA8B,uBAAwB,CACpDC,YAAa,eACbC,4BAAA,GAA6C,IAAjB,YAAEC,GAAe,QACrCC,EAAAA,EAAAA,qBAAoBD,EAAa,CAAEE,QAASpB,QDmBtDqB,EAAAA,EAAAA,qBAAoB,CAClB,CACEC,KAAMV,EACNW,MAAO,gBACPC,OAAS,GAAEX,OAAOC,gBAEpB,CACEQ,KAAO,GAAEV,WACTW,MAAO,QAAEE,GAAF,QAAU,GAAEA,KACnBD,OAAQZ,KAIL,CACLc,MAAO,CACL,CACEC,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,uIAA4BpB,GAC1DG,MAAAA,EACAkB,OAAQ,CAAEC,iCAAiC,GAC3CC,QAAS,CAAED,iCAAiC,KAGhDE,WAAY,CACV,CACEC,GAAI,oBACJC,KAAM,gBACNP,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,gEAAyCpB,GACvEqB,QAAQ,EACRE,SAAS,GAEX,CACEE,GAAI,qCACJC,KAAM,uBACNP,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,+DAA6D,CACzFnB,YAAa,uBACbF,WAAAA,KAGJ,CACE0B,GAAI,oCACJN,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,6GAA+C,CAC3EnB,YAAa,wBACbF,WAAAA,KAGJ,CACE0B,GAAI,gBACJN,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,oGAAmD,CAC/EnB,YAAa,gBACbF,WAAAA,IAEFsB,QAAQ,EACRE,SAAS,GAEX,CACEE,GAAI,iCACJC,KAAM,mCACNP,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,sHAA4E,CACxGnB,YAAa,iCACbF,WAAAA,IAEFsB,QAAQ,EACRE,SAAS,GAEX,CACEE,GAAI,wBACJC,KAAM,sCACNP,MAAMC,EAAAA,EAAAA,oBAAkB,IAAM,qHAA+E,CAC3GnB,YAAa,wBACbF,WAAAA,IAEFsB,QAAQ,EACRE,SAAS,O,eElGjB,IAAII,EAAM,CACT,YAAa,CACZ,KACA,MAGF,SAASC,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEJ,EAAKE,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,KAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAEE,KAAO,mBACHF,KAIR,IAAIG,EAAMX,EAAIE,GAAMJ,EAAKa,EAAI,GAC7B,OAAOR,EAAoBK,EAAEG,EAAI,IAAIJ,MAAK,IAClCJ,EAAoBL,KAG7BG,EAAoBW,KAAO,IAAOC,OAAOD,KAAKZ,GAC9CC,EAAoBH,GAAK,KACzBgB,EAAOC,QAAUd","sources":["webpack://@openmrs/esm-patient-list-app/./src/global-store.ts","webpack://@openmrs/esm-patient-list-app/./src/constants.ts","webpack://@openmrs/esm-patient-list-app/./src/index.ts","webpack://@openmrs/esm-patient-list-app/./src/offline.ts","webpack://@openmrs/esm-patient-list-app//home/runner/work/openmrs-esm-patient-management/openmrs-esm-patient-management/packages/esm-patient-list-app/translations|lazy|nonrecursive|/.json$/"],"sourcesContent":["import { createGlobalStore, getGlobalStore } from '@openmrs/esm-framework';\n\nconst store = createGlobalStore<OfflinePatientListHandlersState>('offline-patient-list-handlers', {\n  onPatientAdded: [],\n});\n\n/**\n * Data passed to `onPatientAdded` handlers in the global offline patient list handlers store.\n * @deprecated\n */\ninterface OnPatientAddedData {\n  /**\n   * The UUID of the user to whose offline patient list the patient was added.\n   */\n  userUuid: string;\n  /**\n   * The UUID of the patient that was just added to the user's offline patient list.\n   */\n  patientUuid: string;\n}\n\n/**\n * Defines the handler function which is invoked when a patient is added to a user's\n * offline patient list.\n * @deprecated\n */\ntype OnPatientAddedHandler = (data: OnPatientAddedData) => void;\n\n/**\n * The shape of the global offline patient list handlers store.\n * @deprecated\n */\ninterface OfflinePatientListHandlersState {\n  /**\n   * The registered handlers which are invoked when a patient is added to a user's offline patient list.\n   */\n  onPatientAdded: Array<OnPatientAddedHandler>;\n}\n\n/**\n *\n * @param data Notification data about the patient that was just added to the user's offline patient list.\n * @deprecated\n */\nexport function notifyOnPatientAdded(data: OnPatientAddedData) {\n  for (const handler of store.getState().onPatientAdded) {\n    handler(data);\n  }\n}\n\n/**\n * Registers the given `onPatientAdded` handler in the global offline patient list handlers store.\n * @param handler The `onPatientAdded` handler to be registered.\n * @deprecated\n */\nexport function registerOnPatientAddedHandler(handler: OnPatientAddedHandler) {\n  const state = store.getState();\n  store.setState({\n    onPatientAdded: [...state.onPatientAdded, handler],\n  });\n}\n","import { omrsOfflineCachingStrategyHttpHeaderName, OmrsOfflineHttpHeaders } from '@openmrs/esm-framework';\n\nexport const cacheForOfflineHeaders: OmrsOfflineHttpHeaders = {\n  [omrsOfflineCachingStrategyHttpHeaderName]: 'network-first',\n};\n","import { getAsyncLifecycle, registerBreadcrumbs, getOfflinePatientDataStore } from '@openmrs/esm-framework';\nimport { usePatientListDetails } from './api';\nimport './global-store';\nimport { setupOffline } from './offline';\n\nconst backendDependencies = {\n  'webservices.rest': '^2.2.0',\n};\n\nconst frontendDependencies = {\n  '@openmrs/esm-framework': process.env.FRAMEWORK_VERSION,\n};\n\nconst importTranslation = require.context('../translations', false, /.json$/, 'lazy');\n\nconst moduleName = '@openmrs/esm-patient-list-app';\nconst options = {\n  featureName: 'patient list',\n  moduleName,\n};\n\nfunction setupOpenMRS() {\n  const route = `patient-list`;\n  const spaBasePath = `${window.spaBase}/${route}`;\n  setupOffline();\n\n  registerBreadcrumbs([\n    {\n      path: spaBasePath,\n      title: 'Patient Lists',\n      parent: `${window.spaBase}/home`,\n    },\n    {\n      path: `${spaBasePath}/:uuid?`,\n      title: ([x]) => `${x}`,\n      parent: spaBasePath,\n    },\n  ]);\n\n  return {\n    pages: [\n      {\n        load: getAsyncLifecycle(() => import('./root.component'), options),\n        route,\n        online: { syncUserPropertiesChangesOnLoad: true },\n        offline: { syncUserPropertiesChangesOnLoad: false },\n      },\n    ],\n    extensions: [\n      {\n        id: 'patient-list-link',\n        slot: 'app-menu-slot',\n        load: getAsyncLifecycle(() => import('./patient-list-link.component'), options),\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'add-patient-to-patient-list-button',\n        slot: 'patient-actions-slot',\n        load: getAsyncLifecycle(() => import('./add-patient-to-patient-list-menu-item.component'), {\n          featureName: 'patient-actions-slot',\n          moduleName,\n        }),\n      },\n      {\n        id: 'add-patient-to-patient-list-modal',\n        load: getAsyncLifecycle(() => import('./add-patient/add-patient.component'), {\n          featureName: 'patient-actions-modal',\n          moduleName,\n        }),\n      },\n      {\n        id: 'patient-table',\n        load: getAsyncLifecycle(() => import('./patient-table/patient-table.component'), {\n          featureName: 'patient-table',\n          moduleName,\n        }),\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'overview-offline-patient-table',\n        slot: 'offline-tools-home-overview-slot',\n        load: getAsyncLifecycle(() => import('./offline-patient-table/overview-offline-patient-table.component'), {\n          featureName: 'overview-offline-patient-table',\n          moduleName,\n        }),\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'offline-patient-table',\n        slot: 'offline-tools-offline-patients-slot',\n        load: getAsyncLifecycle(() => import('./offline-patient-table/interactive-offline-patient-table.component'), {\n          featureName: 'offline-patient-table',\n          moduleName,\n        }),\n        online: true,\n        offline: true,\n      },\n    ],\n  };\n}\n\nexport { backendDependencies, frontendDependencies, importTranslation, setupOpenMRS };\n","import { fetchCurrentPatient, registerOfflinePatientHandler } from '@openmrs/esm-framework';\nimport { cacheForOfflineHeaders } from './constants';\n\nexport function setupOffline() {\n  registerOfflinePatientHandler('esm-patient-list-app', {\n    displayName: 'Patient list',\n    async onOfflinePatientAdded({ patientUuid }) {\n      await fetchCurrentPatient(patientUuid, { headers: cacheForOfflineHeaders });\n    },\n  });\n}\n","var map = {\n\t\"./en.json\": [\n\t\t3574,\n\t\t574\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 3979;\nmodule.exports = webpackAsyncContext;"],"names":["createGlobalStore","onPatientAdded","cacheForOfflineHeaders","omrsOfflineCachingStrategyHttpHeaderName","backendDependencies","frontendDependencies","process","importTranslation","require","moduleName","options","featureName","setupOpenMRS","route","spaBasePath","window","spaBase","registerOfflinePatientHandler","displayName","async","patientUuid","fetchCurrentPatient","headers","registerBreadcrumbs","path","title","parent","x","pages","load","getAsyncLifecycle","online","syncUserPropertiesChangesOnLoad","offline","extensions","id","slot","map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","keys","Object","module","exports"],"sourceRoot":""}