{"version":3,"file":"71.js","mappings":"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","sources":["webpack://@openmrs/esm-patient-registration-app/./src/constants.ts","webpack://@openmrs/esm-patient-registration-app/./src/patient-registration/form-manager.ts","webpack://@openmrs/esm-patient-registration-app/./src/config-schemas/openmrs-esm-patient-registration-schema.ts","webpack://@openmrs/esm-patient-registration-app/./src/offline.ts","webpack://@openmrs/esm-patient-registration-app/./src/index.ts","webpack://@openmrs/esm-patient-registration-app/./__mocks__/autogenerationoptions.mock.ts","webpack://@openmrs/esm-patient-registration-app/./src/offline.resources.ts","webpack://@openmrs/esm-patient-registration-app/./src/patient-registration/patient-registration.resource.tsx","webpack://@openmrs/esm-patient-registration-app//home/runner/work/openmrs-esm-patient-management/openmrs-esm-patient-management/packages/esm-patient-registration-app/translations|lazy|nonrecursive|/.json$/"],"sourcesContent":["import { omrsOfflineCachingStrategyHttpHeaderName, OmrsOfflineHttpHeaders } from '@openmrs/esm-framework';\n\nexport const moduleName = '@openmrs/esm-patient-registration-app';\nexport const patientRegistration = 'patient-registration';\n\nexport const cacheForOfflineHeaders: OmrsOfflineHttpHeaders = {\n  [omrsOfflineCachingStrategyHttpHeaderName]: 'network-first',\n};\n","import { v4 } from 'uuid';\nimport { queueSynchronizationItem } from '@openmrs/esm-framework';\nimport { patientRegistration } from '../constants';\nimport {\n  FormValues,\n  PatientIdentifierType,\n  AttributeValue,\n  PatientUuidMapType,\n  Patient,\n  CapturePhotoProps,\n  PatientIdentifier,\n  PatientIdentifierValue,\n  PatientRegistration,\n} from './patient-registration-types';\nimport {\n  addPatientIdentifier,\n  deletePatientIdentifier,\n  deletePersonName,\n  generateIdentifier,\n  savePatient,\n  savePatientPhoto,\n  saveRelationship,\n  updatePatientIdentifier,\n} from './patient-registration.resource';\nimport isEqual from 'lodash-es/isEqual';\n\nexport type SavePatientForm = (\n  isNewPatient: boolean,\n  values: FormValues,\n  patientUuidMap: PatientUuidMapType,\n  initialAddressFieldValues: Record<string, any>,\n  identifierTypes: Array<PatientIdentifierType>,\n  capturePhotoProps: CapturePhotoProps,\n  patientPhotoConceptUuid: string,\n  currentLocation: string,\n  personAttributeSections: any,\n  abortController?: AbortController,\n) => Promise<string | null>;\n\nexport default class FormManager {\n  static async savePatientFormOffline(\n    isNewPatient: boolean,\n    values: FormValues,\n    patientUuidMap: PatientUuidMapType,\n    initialAddressFieldValues: Record<string, any>,\n    identifierTypes: Array<PatientIdentifierType>,\n    capturePhotoProps: CapturePhotoProps,\n    patientPhotoConceptUuid: string,\n    currentLocation: string,\n    personAttributeSections: any,\n  ): Promise<null> {\n    const syncItem: PatientRegistration = {\n      fhirPatient: FormManager.mapPatientToFhirPatient(\n        FormManager.getPatientToCreate(values, personAttributeSections, patientUuidMap, initialAddressFieldValues, []),\n      ),\n      _patientRegistrationData: {\n        isNewPatient,\n        formValues: values,\n        patientUuidMap,\n        initialAddressFieldValues,\n        identifierTypes,\n        capturePhotoProps,\n        patientPhotoConceptUuid,\n        currentLocation,\n        personAttributeSections,\n      },\n    };\n\n    await queueSynchronizationItem(patientRegistration, syncItem, {\n      id: values.patientUuid,\n      displayName: 'Patient registration',\n      dependencies: [],\n    });\n\n    return null;\n  }\n\n  static async savePatientFormOnline(\n    isNewPatient: boolean,\n    values: FormValues,\n    patientUuidMap: PatientUuidMapType,\n    initialAddressFieldValues: Record<string, any>,\n    identifierTypes: Array<PatientIdentifierType>,\n    capturePhotoProps: CapturePhotoProps,\n    patientPhotoConceptUuid: string,\n    currentLocation: string,\n    personAttributeSections: any,\n    abortController: AbortController,\n  ): Promise<string> {\n    const patientIdentifiers: Array<PatientIdentifier> = await FormManager.savePatientIdentifiers(\n      values.patientUuid,\n      values.identifiers,\n      currentLocation,\n      abortController,\n    );\n\n    const createdPatient = FormManager.getPatientToCreate(\n      values,\n      personAttributeSections,\n      patientUuidMap,\n      initialAddressFieldValues,\n      patientIdentifiers,\n    );\n\n    FormManager.getDeletedNames(values.patientUuid, patientUuidMap).forEach(async (name) => {\n      await deletePersonName(name.nameUuid, name.personUuid, abortController);\n    });\n\n    const savePatientResponse = await savePatient(\n      abortController,\n      createdPatient,\n      isNewPatient ? undefined : values.patientUuid,\n    );\n\n    if (savePatientResponse.ok) {\n      await Promise.all(\n        values.relationships\n          .filter((m) => m.relationship)\n          .map(({ relatedPerson: relatedPersonUuid, relationship }) => {\n            const relationshipType = relationship.split('/')[0];\n            const direction = relationship.split('/')[1];\n            const thisPatientUuid = savePatientResponse.data.uuid;\n            const isAToB = direction === 'aIsToB';\n            const relationshipToSave = {\n              personA: isAToB ? relatedPersonUuid : thisPatientUuid,\n              personB: isAToB ? thisPatientUuid : relatedPersonUuid,\n              relationshipType,\n            };\n\n            return saveRelationship(abortController, relationshipToSave);\n          }),\n      );\n\n      if (patientPhotoConceptUuid && capturePhotoProps?.imageData) {\n        await savePatientPhoto(\n          savePatientResponse.data.uuid,\n          capturePhotoProps.imageData,\n          '/ws/rest/v1/obs',\n          capturePhotoProps.dateTime || new Date().toISOString(),\n          patientPhotoConceptUuid,\n          abortController,\n        );\n      }\n    }\n\n    return savePatientResponse.data.uuid;\n  }\n\n  static async savePatientIdentifiers(\n    patientUuid: string,\n    patientIdentifiers: Array<PatientIdentifierValue>, // values.identifiers\n    location: string,\n    abortController: AbortController,\n  ): Promise<Array<PatientIdentifier>> {\n    let identifierTypeRequests = patientIdentifiers\n      .filter((identifier) => identifier.action !== 'DELETE' && identifier.action !== 'NONE')\n      .map(async (patientIdentifier) => {\n        const { identifierTypeUuid, identifier, uuid, action, source, preferred, autoGeneration } = patientIdentifier;\n        if (identifier || (source && autoGeneration)) {\n          const identifierValue = identifier\n            ? identifier\n            : await (\n                await generateIdentifier(patientIdentifier.source.uuid, abortController)\n              ).data.identifier;\n          const identifierToCreate = {\n            uuid,\n            identifier: identifierValue,\n            identifierType: identifierTypeUuid,\n            location,\n            preferred,\n          };\n\n          if (patientUuid) {\n            if (action === 'ADD') {\n              await addPatientIdentifier(patientUuid, identifierToCreate, abortController);\n            } else if (action === 'UPDATE') {\n              await updatePatientIdentifier(patientUuid, uuid, identifierToCreate.identifier, abortController);\n            }\n          }\n\n          return identifierToCreate;\n        } else {\n          // This is a case that should not occur.\n          // If it did, the subsequent network request (when creating the patient) would fail with\n          // BadRequest since the (returned) identifier type is undefined.\n          // Better stop early.\n          throw new Error('No approach for generating a patient identifier could be found.');\n        }\n      });\n\n    if (patientUuid) {\n      patientIdentifiers\n        .filter((patientIdentifier) => patientIdentifier.action === 'DELETE')\n        .forEach(\n          async (patientIdentifier) =>\n            await deletePatientIdentifier(patientUuid, patientIdentifier.uuid, abortController),\n        );\n    }\n\n    return Promise.all(identifierTypeRequests);\n  }\n\n  static getDeletedNames(patientUuid: string, patientUuidMap: PatientUuidMapType) {\n    if (patientUuidMap?.additionalNameUuid) {\n      return [\n        {\n          nameUuid: patientUuidMap.additionalNameUuid,\n          personUuid: patientUuid,\n        },\n      ];\n    }\n    return [];\n  }\n\n  static getPatientToCreate(\n    values: FormValues,\n    personAttributeSections: any,\n    patientUuidMap: PatientUuidMapType,\n    initialAddressFieldValues: Record<string, any>,\n    identifiers: Array<PatientIdentifier>,\n  ): Patient {\n    let address = FormManager.getPatientAddressField(values, initialAddressFieldValues);\n\n    if (isEqual(initialAddressFieldValues, address)) {\n      address = {};\n    }\n\n    return {\n      uuid: values.patientUuid,\n      person: {\n        uuid: values.patientUuid,\n        names: FormManager.getNames(values, patientUuidMap),\n        gender: values.gender.charAt(0),\n        birthdate: values.birthdate,\n        birthdateEstimated: values.birthdateEstimated,\n        attributes: FormManager.getPatientAttributes(values, personAttributeSections),\n        addresses: [address],\n        ...FormManager.getPatientDeathInfo(values),\n      },\n      identifiers,\n    };\n  }\n\n  static getNames(values: FormValues, patientUuidMap: PatientUuidMapType) {\n    const names = [\n      {\n        uuid: patientUuidMap.preferredNameUuid,\n        preferred: true,\n        givenName: values.givenName,\n        middleName: values.middleName,\n        familyName: values.familyName,\n      },\n    ];\n\n    if (values.addNameInLocalLanguage) {\n      names.push({\n        uuid: patientUuidMap.additionalNameUuid,\n        preferred: false,\n        givenName: values.additionalGivenName,\n        middleName: values.additionalMiddleName,\n        familyName: values.additionalFamilyName,\n      });\n    }\n\n    return names;\n  }\n\n  static getPatientAttributes(values: FormValues, personAttributeSections?: any) {\n    const attributes: Array<AttributeValue> = [];\n\n    if (personAttributeSections) {\n      for (const section of personAttributeSections) {\n        for (const attr of section.personAttributes) {\n          attributes.push({\n            attributeType: attr.uuid,\n            value: values[attr.name],\n          });\n        }\n      }\n    }\n\n    return attributes;\n  }\n\n  static getPatientAddressField(\n    values: FormValues,\n    initialAddressFieldValues: Record<string, any>,\n  ): Record<string, string> {\n    return Object.keys(initialAddressFieldValues).reduce(\n      (memo, fieldName) => ({ ...memo, [fieldName]: values[fieldName] }),\n      {},\n    );\n  }\n\n  static getPatientDeathInfo(values: FormValues) {\n    const { isDead, deathDate, deathCause } = values;\n    return {\n      dead: isDead,\n      deathDate: isDead ? deathDate : undefined,\n      causeOfDeath: isDead ? deathCause : undefined,\n    };\n  }\n\n  static mapPatientToFhirPatient(patient: Partial<Patient>): fhir.Patient {\n    // Important:\n    // When changing this code, ideally assume that `patient` can be missing any attribute.\n    // The `fhir.Patient` provides us with the benefit that all properties are nullable and thus\n    // not required (technically, at least). -> Even if we cannot map some props here, we still\n    // provide a valid fhir.Patient object. The various patient chart modules should be able to handle\n    // such missing props correctly (and should be updated if they don't).\n\n    // Gender in the original object only uses a single letter. fhir.Patient expects a full string.\n    const genderMap = {\n      M: 'male',\n      F: 'female',\n      O: 'other',\n      U: 'unknown',\n    };\n\n    // Mapping inspired by:\n    // https://github.com/openmrs/openmrs-module-fhir/blob/669b3c52220bb9abc622f815f4dc0d8523687a57/api/src/main/java/org/openmrs/module/fhir/api/util/FHIRPatientUtil.java#L36\n    // https://github.com/openmrs/openmrs-esm-patient-management/blob/94e6f637fb37cf4984163c355c5981ea6b8ca38c/packages/esm-patient-search-app/src/patient-search-result/patient-search-result.component.tsx#L21\n    // Update as required.\n    return {\n      id: patient.uuid,\n      gender: genderMap[patient.person?.gender],\n      birthDate: patient.person?.birthdate,\n      deceasedBoolean: patient.person.dead,\n      deceasedDateTime: patient.person.deathDate,\n      name: patient.person?.names?.map((name) => ({\n        given: [name.givenName, name.middleName].filter(Boolean),\n        family: name.familyName,\n      })),\n      address: patient.person?.addresses.map((address) => ({\n        city: address.cityVillage,\n        country: address.country,\n        postalCode: address.postalCode,\n        state: address.stateProvince,\n        use: 'home',\n      })),\n      telecom: patient.person.attributes?.filter((attribute) => attribute.attributeType === 'Telephone Number'),\n    };\n  }\n}\n","import { Type, validators } from '@openmrs/esm-framework';\nconst builtInFields = ['name', 'gender', 'dob', 'address', 'id', 'death'];\nexport const esmPatientRegistrationSchema = {\n  sections: {\n    _type: Type.Array,\n    _default: ['demographics', 'contact', 'relationships'],\n    _description: \"An array of strings which are the keys from 'sectionDefinitions'\",\n    _elements: {\n      _type: Type.String,\n    },\n  },\n  sectionDefinitions: {\n    _type: Type.Object,\n    _elements: {\n      name: {\n        _type: Type.String,\n        _default: '',\n        _description: 'The title to display at the top of the section.',\n      },\n      fields: {\n        _type: Type.Array,\n        _default: [],\n        _description: `The parts to include in the section. Can be any of the following built-in fields: ${builtInFields.join(\n          ', ',\n        )}. Can also be any of the keys from the fieldDefinitions object, which you can use to define custom fields.`,\n        _elements: { _type: Type.String }, // another validator at top level\n      },\n    },\n    _default: {\n      demographics: { name: 'Basic Info', fields: ['name', 'gender & dob', 'id'] },\n      contact: { name: 'Contact Details', fields: ['address', 'phone & email'] },\n      death: { name: 'Death Info', fields: ['death'] },\n      relationships: { name: 'Relationships' },\n    },\n  },\n  fieldDefinitions: {\n    _type: Type.Object,\n    _elements: {\n      label: { _type: Type.String, _description: 'The label of the input' },\n      uuid: {\n        _type: Type.UUID,\n        _description: 'Person attributetype uuid used to save the attribute',\n      },\n      placeholder: {\n        _type: Type.String,\n        _default: '',\n        _description: 'Placeholder that will appear in the input.',\n      },\n      validation: {\n        required: { _type: Type.Boolean, _default: false },\n        matches: {\n          _type: Type.String,\n          _default: null,\n          _description: 'Optional RegEx for testing the validity of the input.',\n        },\n      },\n    },\n    _default: {\n      phone: {\n        label: 'Telephone Number',\n        uuid: '14d4f066-15f5-102d-96e4-000c29c2a5d7',\n        validation: { required: true, matches: '^[0-9]*$' },\n      },\n    },\n    _description:\n      'Definitions for custom fields that can be used in sectionDefinitions. Can also be used to override built-in fields.',\n  },\n  fieldConfigurations: {\n    _type: Type.Object,\n    _default: {\n      name: {\n        displayMiddleName: true,\n        unidentifiedPatient: true,\n      },\n    },\n  },\n  links: {\n    submitButton: {\n      _type: Type.String,\n      _default: '${openmrsSpaBase}/patient/${patientUuid}/chart',\n      _validators: [validators.isUrlWithTemplateParameters(['patientUuid'])],\n    },\n  },\n  concepts: {\n    patientPhotoUuid: {\n      _type: Type.ConceptUuid,\n      _default: '736e8771-e501-4615-bfa7-570c03f4bef5',\n    },\n  },\n  personAttributeSections: {\n    _type: Type.Array,\n    _default: [{ personAttributes: [{ name: 'phone', uuid: '14d4f066-15f5-102d-96e4-000c29c2a5d7' }] }],\n    _elements: {\n      _type: Type.Object,\n      personAttributes: {\n        _type: Type.Array,\n        _elements: {\n          _type: Type.Object,\n          uuid: {\n            _type: Type.UUID,\n            _description: 'Person attributetype uuid used to save the attribute',\n          },\n          name: {\n            _type: Type.String,\n            _default: '',\n          },\n          _default: {\n            phone: {\n              name: 'phone',\n              uuid: '14d4f066-15f5-102d-96e4-000c29c2a5d7',\n            },\n          },\n        },\n      },\n    },\n  },\n};\n","import {\n  fetchCurrentPatient,\n  OfflinePatientArgs,\n  registerOfflinePatientHandler,\n  setupOfflineSync,\n  subscribePrecacheStaticDependencies,\n  SyncProcessOptions,\n} from '@openmrs/esm-framework';\nimport { cacheForOfflineHeaders, patientRegistration } from './constants';\nimport {\n  fetchAddressTemplate,\n  fetchAllRelationshipTypes,\n  fetchCurrentSession,\n  fetchPatientIdentifierTypesWithSources,\n} from './offline.resources';\nimport FormManager from './patient-registration/form-manager';\nimport { PatientRegistration } from './patient-registration/patient-registration-types';\n\nexport function setupOffline() {\n  setupOfflineSync(patientRegistration, [], syncPatientRegistration);\n  subscribePrecacheStaticDependencies(precacheStaticAssets);\n  registerOfflinePatientHandler('esm-patient-registration-app', {\n    displayName: 'Patient registration',\n    async onOfflinePatientAdded({ patientUuid }) {\n      await fetchCurrentPatient(patientUuid, { headers: cacheForOfflineHeaders });\n    },\n  });\n}\n\nasync function precacheStaticAssets() {\n  await Promise.all([\n    fetchCurrentSession(),\n    fetchAddressTemplate(),\n    fetchAllRelationshipTypes(),\n    fetchPatientIdentifierTypesWithSources(),\n  ]);\n}\n\nexport async function syncPatientRegistration(\n  queuedPatient: PatientRegistration,\n  options: SyncProcessOptions<PatientRegistration>,\n) {\n  await FormManager.savePatientFormOnline(\n    queuedPatient._patientRegistrationData.isNewPatient,\n    queuedPatient._patientRegistrationData.formValues,\n    queuedPatient._patientRegistrationData.patientUuidMap,\n    queuedPatient._patientRegistrationData.initialAddressFieldValues,\n    queuedPatient._patientRegistrationData.identifierTypes,\n    queuedPatient._patientRegistrationData.capturePhotoProps,\n    queuedPatient._patientRegistrationData.patientPhotoConceptUuid,\n    queuedPatient._patientRegistrationData.currentLocation,\n    queuedPatient._patientRegistrationData.personAttributeSections,\n    options.abort,\n  );\n}\n","import FormManager from './patient-registration/form-manager';\nimport { registerBreadcrumbs, defineConfigSchema, getAsyncLifecycle } from '@openmrs/esm-framework';\nimport {\n  fetchCurrentSession,\n  fetchAddressTemplate,\n  fetchPatientIdentifierTypesWithSources,\n  fetchAllRelationshipTypes,\n} from './offline.resources';\nimport { esmPatientRegistrationSchema } from './config-schemas/openmrs-esm-patient-registration-schema';\nimport { moduleName, patientRegistration } from './constants';\nimport { setupOffline } from './offline';\n\nconst importTranslation = require.context('../translations', false, /.json$/, 'lazy');\n\nconst backendDependencies = {\n  'webservices.rest': '^2.24.0',\n};\n\nconst frontendDependencies = {\n  '@openmrs/esm-framework': process.env.FRAMEWORK_VERSION,\n};\n\nconst resources = {\n  currentSession: fetchCurrentSession,\n  addressTemplate: fetchAddressTemplate,\n  relationshipTypes: fetchAllRelationshipTypes,\n  identifierTypes: fetchPatientIdentifierTypesWithSources,\n};\n\nfunction setupOpenMRS() {\n  const options = {\n    featureName: 'Patient Registration',\n    moduleName,\n  };\n\n  defineConfigSchema(moduleName, esmPatientRegistrationSchema);\n\n  registerBreadcrumbs([\n    {\n      path: `${window.spaBase}/${patientRegistration}`,\n      title: 'Patient Registration',\n      parent: `${window.spaBase}/home`,\n    },\n  ]);\n\n  setupOffline();\n\n  return {\n    pages: [\n      {\n        load: getAsyncLifecycle(() => import('./root.component'), options),\n        route: /^patient-registration/,\n        online: {\n          savePatientForm: FormManager.savePatientFormOnline,\n        },\n        offline: {\n          savePatientForm: FormManager.savePatientFormOffline,\n        },\n        resources,\n      },\n      {\n        load: getAsyncLifecycle(() => import('./root.component'), {\n          featureName: 'edit-patient-details-form',\n          moduleName,\n        }),\n        route: /^patient\\/([a-zA-Z0-9\\-]+)\\/edit/,\n        online: {\n          savePatientForm: FormManager.savePatientFormOnline,\n        },\n        offline: {\n          savePatientForm: FormManager.savePatientFormOffline,\n        },\n        resources,\n      },\n    ],\n    extensions: [\n      {\n        id: 'add-patient-action',\n        slot: 'top-nav-actions-slot',\n        load: getAsyncLifecycle(() => import('./add-patient-link'), options),\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'cancel-patient-edit-modal',\n        load: getAsyncLifecycle(() => import('./widgets/cancel-patient-edit.component'), options),\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'patient-photo-widget',\n        slot: 'patient-photo-slot',\n        load: getAsyncLifecycle(() => import('./widgets/display-photo.component'), options),\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'edit-patient-details-button',\n        slot: 'patient-actions-slot',\n        load: getAsyncLifecycle(() => import('./widgets/edit-patient-details-button.component'), options),\n        online: true,\n        offline: true,\n      },\n      {\n        id: 'delete-identifier-confirmation-modal',\n        load: getAsyncLifecycle(() => import('./widgets/delete-identifier-confirmation-modal'), options),\n        online: true,\n        offline: true,\n      },\n    ],\n  };\n}\n\nexport { backendDependencies, frontendDependencies, importTranslation, setupOpenMRS };\n","export const mockAutoGenerationOptionsResult = {\n  results: [\n    {\n      uuid: '42ae5ce0-d64b-11ea-9064-5adc43bbdd24',\n      location: null,\n      source: {\n        uuid: '691eed12-c0f1-11e2-94be-8c13b969e334',\n      },\n      manualEntryEnabled: false,\n      automaticGenerationEnabled: true,\n      resourceVersion: '1.8',\n    },\n    {\n      uuid: '497b8b17-54ec-4726-87ec-3c4da8cdcaeb',\n      location: null,\n      source: {\n        uuid: '691eed12-c0f1-11e2-94be-8c13b969e334',\n      },\n      manualEntryEnabled: true,\n      automaticGenerationEnabled: false,\n      resourceVersion: '1.8',\n    },\n    {\n      uuid: 'ed0529de-3530-4c49-921b-b4845a750b7e',\n      location: null,\n      source: {\n        uuid: '75df804e-03c1-4964-842b-4fec585839e7',\n      },\n      manualEntryEnabled: true,\n      automaticGenerationEnabled: false,\n      resourceVersion: '1.8',\n    },\n  ],\n};\n","import React from 'react';\nimport find from 'lodash-es/find';\nimport camelCase from 'lodash-es/camelCase';\nimport escapeRegExp from 'lodash-es/escapeRegExp';\nimport { FetchResponse, messageOmrsServiceWorker, openmrsFetch, SessionUser } from '@openmrs/esm-framework';\nimport { PatientIdentifierType, FetchedPatientIdentifierType } from './patient-registration/patient-registration-types';\nimport { mockAutoGenerationOptionsResult } from '../__mocks__/autogenerationoptions.mock';\nimport { cacheForOfflineHeaders } from './constants';\n\nexport interface Resources {\n  addressTemplate: any;\n  currentSession: SessionUser;\n  relationshipTypes: any;\n  identifierTypes: Array<PatientIdentifierType>;\n}\n\nexport const ResourcesContext = React.createContext<Resources>(null);\n\nexport async function fetchCurrentSession(abortController?: AbortController): Promise<FetchResponse<SessionUser>> {\n  const { data } = await cacheAndFetch('/ws/rest/v1/session', abortController);\n  return data;\n}\n\nexport async function fetchAddressTemplate(abortController?: AbortController) {\n  const { data } = await cacheAndFetch(\n    '/ws/rest/v1/systemsetting?q=layout.address.format&v=custom:(value)',\n    abortController,\n  );\n  return data;\n}\n\nexport async function fetchAllRelationshipTypes(abortController?: AbortController) {\n  const { data } = await cacheAndFetch('/ws/rest/v1/relationshiptype?v=default', abortController);\n  return data;\n}\n\nexport async function fetchPatientIdentifierTypesWithSources(\n  abortController?: AbortController,\n): Promise<Array<PatientIdentifierType>> {\n  const [primaryIdentifierType, secondaryIdentifierTypes] = await Promise.all([\n    fetchPrimaryIdentifierType(abortController),\n    fetchSecondaryIdentifierTypes(abortController),\n  ]);\n\n  // @ts-ignore Reason: The required props of the type are generated below.\n  const identifierTypes: Array<PatientIdentifierType> = [primaryIdentifierType, ...secondaryIdentifierTypes].filter(\n    Boolean,\n  );\n\n  for (const identifierType of identifierTypes) {\n    const [identifierSources, autoGenOptions] = await Promise.all([\n      fetchIdentifierSources(identifierType.uuid, abortController),\n      fetchAutoGenerationOptions(identifierType.uuid, abortController),\n    ]);\n\n    identifierType.identifierSources = identifierSources.data.results.map((source) => {\n      const option = find(autoGenOptions.results, { source: { uuid: source.uuid } });\n      source.autoGenerationOption = option;\n      return source;\n    });\n  }\n\n  return identifierTypes;\n}\n\nasync function fetchPrimaryIdentifierType(abortController: AbortController): Promise<FetchedPatientIdentifierType> {\n  const primaryIdentifierTypeResponse = await cacheAndFetch(\n    '/ws/rest/v1/metadatamapping/termmapping?v=full&code=emr.primaryIdentifierType',\n    abortController,\n  );\n\n  const { data: metadata } = await cacheAndFetch(\n    `/ws/rest/v1/patientidentifiertype/${primaryIdentifierTypeResponse.data.results[0].metadataUuid}`,\n    abortController,\n  );\n\n  return {\n    name: metadata.name,\n    fieldName: camelCase(metadata.name),\n    required: metadata.required,\n    uuid: metadata.uuid,\n    format: metadata.format,\n    isPrimary: true,\n  };\n}\n\nasync function fetchSecondaryIdentifierTypes(\n  abortController?: AbortController,\n): Promise<Array<FetchedPatientIdentifierType>> {\n  const secondaryIdentifierTypeResponse = await cacheAndFetch(\n    '/ws/rest/v1/metadatamapping/termmapping?v=full&code=emr.extraPatientIdentifierTypes',\n    abortController,\n  );\n\n  if (secondaryIdentifierTypeResponse.data.results) {\n    const extraIdentifierTypesSetUuid = secondaryIdentifierTypeResponse.data.results[0].metadataUuid;\n    const metadataResponse = await cacheAndFetch(\n      `/ws/rest/v1/metadatamapping/metadataset/${extraIdentifierTypesSetUuid}/members`,\n      abortController,\n    );\n\n    if (metadataResponse.data.results) {\n      return await Promise.all(\n        metadataResponse.data.results.map(async (setMember) => {\n          const type = await cacheAndFetch(\n            `/ws/rest/v1/patientidentifiertype/${setMember.metadataUuid}`,\n            abortController,\n          );\n\n          return {\n            name: type.data.name,\n            fieldName: camelCase(type.data.name),\n            required: type.data.required,\n            uuid: type.data.uuid,\n            format: secondaryIdentifierTypeResponse.data.format,\n            isPrimary: false,\n          };\n        }),\n      );\n    }\n  }\n\n  return [];\n}\n\nasync function fetchIdentifierSources(identifierType: string, abortController?: AbortController) {\n  return await cacheAndFetch(\n    `/ws/rest/v1/idgen/identifiersource?v=full&identifierType=${identifierType}`,\n    abortController,\n  );\n}\n\nfunction fetchAutoGenerationOptions(identifierType: string, abortController?: AbortController) {\n  // return openmrsFetch('/ws/rest/v1/idgen/autogenerationoption?v=full&identifierType=' + identifierType, {\n  //   signal: abortController.signal,\n  //   headers: cacheForOfflineHeaders,\n  // });‚\n  return Promise.resolve(mockAutoGenerationOptionsResult);\n}\n\nasync function cacheAndFetch(url: string, abortController?: AbortController) {\n  await messageOmrsServiceWorker({\n    type: 'registerDynamicRoute',\n    pattern: escapeRegExp(url),\n  });\n\n  return await openmrsFetch(url, { headers: cacheForOfflineHeaders, signal: abortController?.signal });\n}\n","import useSWR from 'swr';\nimport { openmrsFetch, useConfig } from '@openmrs/esm-framework';\nimport { Patient, Relationship, PatientIdentifier } from './patient-registration-types';\n\nexport const uuidIdentifier = '05a29f94-c0ed-11e2-94be-8c13b969e334';\nexport const uuidTelephoneNumber = '14d4f066-15f5-102d-96e4-000c29c2a5d7';\n\nfunction dataURItoFile(dataURI: string) {\n  const byteString = atob(dataURI.split(',')[1]);\n  const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n  // write the bytes of the string to a typed array\n  const buffer = new Uint8Array(byteString.length);\n\n  for (let i = 0; i < byteString.length; i++) {\n    buffer[i] = byteString.charCodeAt(i);\n  }\n\n  const blob = new Blob([buffer], { type: mimeString });\n  return new File([blob], 'patient-photo.png');\n}\n\nexport function savePatient(abortController: AbortController, patient: Patient, updatePatientUuid?: string) {\n  return openmrsFetch(`/ws/rest/v1/patient/${updatePatientUuid || ''}`, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    body: patient,\n    signal: abortController.signal,\n  });\n}\n\nexport function generateIdentifier(source: string, abortController: AbortController) {\n  return openmrsFetch(`/ws/rest/v1/idgen/identifiersource/${source}/identifier`, {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    body: {},\n    signal: abortController.signal,\n  });\n}\n\nexport function deletePersonName(nameUuid: string, personUuid: string, abortController: AbortController) {\n  return openmrsFetch(`/ws/rest/v1/person/${personUuid}/name/${nameUuid}`, {\n    method: 'DELETE',\n    signal: abortController.signal,\n  });\n}\n\nexport function saveRelationship(abortController: AbortController, relationship: Relationship) {\n  return openmrsFetch('/ws/rest/v1/relationship', {\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    body: relationship,\n    signal: abortController.signal,\n  });\n}\n\nexport async function savePatientPhoto(\n  patientUuid: string,\n  content: string,\n  url: string,\n  date: string,\n  conceptUuid: string,\n  abortController: AbortController,\n) {\n  const formData = new FormData();\n  formData.append('patient', patientUuid);\n  formData.append('file', dataURItoFile(content));\n  formData.append(\n    'json',\n    JSON.stringify({\n      person: patientUuid,\n      concept: conceptUuid,\n      groupMembers: [],\n      obsDatetime: date,\n    }),\n  );\n\n  return openmrsFetch(url, {\n    method: 'POST',\n    signal: abortController.signal,\n    body: formData,\n  });\n}\n\ninterface ObsFetchResponse {\n  results: Array<PhotoObs>;\n}\n\ninterface PhotoObs {\n  display: string;\n  obsDatetime: string;\n  uuid: string;\n  value: {\n    display: string;\n    links: {\n      rel: string;\n      uri: string;\n    };\n  };\n}\n\ninterface UsePatientPhotoResult {\n  data: { dateTime: string; imageSrc: string } | null;\n  isError: Error;\n  isLoading: boolean;\n}\n\nexport function usePatientPhoto(patientUuid: string): UsePatientPhotoResult {\n  const {\n    concepts: { patientPhotoUuid },\n  } = useConfig();\n  const url = `/ws/rest/v1/obs?patient=${patientUuid}&concept=${patientPhotoUuid}&v=full`;\n\n  const { data, error } = useSWR<{ data: ObsFetchResponse }, Error>(patientUuid ? url : null, openmrsFetch);\n\n  const item = data?.data?.results[0];\n\n  return {\n    data: item\n      ? {\n          dateTime: item?.obsDatetime,\n          imageSrc: item?.value?.links?.uri,\n        }\n      : null,\n    isError: error,\n    isLoading: !data && !error,\n  };\n}\n\nexport async function fetchPerson(query: string, abortController: AbortController) {\n  return openmrsFetch(`/ws/rest/v1/person?q=${query}`, {\n    signal: abortController.signal,\n  });\n}\n\nexport async function addPatientIdentifier(\n  patientUuid: string,\n  patientIdentifier: PatientIdentifier,\n  abortController: AbortController,\n) {\n  return openmrsFetch(`/ws/rest/v1/patient/${patientUuid}/identifier/`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    signal: abortController.signal,\n    body: patientIdentifier,\n  });\n}\n\nexport async function updatePatientIdentifier(\n  patientUuid: string,\n  identifierUuid: string,\n  identifier: string,\n  abortController: AbortController,\n) {\n  return openmrsFetch(`/ws/rest/v1/patient/${patientUuid}/identifier/${identifierUuid}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    signal: abortController.signal,\n    body: { identifier },\n  });\n}\n\nexport async function deletePatientIdentifier(\n  patientUuid: string,\n  patientIdentifierUuid: string,\n  abortController: AbortController,\n) {\n  return openmrsFetch(`/ws/rest/v1/patient/${patientUuid}/identifier/${patientIdentifierUuid}?purge`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    signal: abortController.signal,\n  });\n}\n","var map = {\n\t\"./en.json\": [\n\t\t3574,\n\t\t574\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(() => {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(() => {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = () => (Object.keys(map));\nwebpackAsyncContext.id = 3979;\nmodule.exports = webpackAsyncContext;"],"names":["moduleName","patientRegistration","cacheForOfflineHeaders","omrsOfflineCachingStrategyHttpHeaderName","FormManager","isNewPatient","values","patientUuidMap","initialAddressFieldValues","identifierTypes","capturePhotoProps","patientPhotoConceptUuid","currentLocation","personAttributeSections","syncItem","fhirPatient","mapPatientToFhirPatient","getPatientToCreate","_patientRegistrationData","formValues","queueSynchronizationItem","id","patientUuid","displayName","dependencies","abortController","patientIdentifiers","savePatientIdentifiers","identifiers","createdPatient","getDeletedNames","forEach","async","deletePersonName","name","nameUuid","personUuid","savePatientResponse","savePatient","undefined","ok","Promise","all","relationships","filter","m","relationship","map","relatedPerson","relatedPersonUuid","relationshipType","split","direction","thisPatientUuid","data","uuid","isAToB","relationshipToSave","personA","personB","saveRelationship","imageData","savePatientPhoto","dateTime","Date","toISOString","location","identifierTypeRequests","identifier","action","identifierTypeUuid","source","preferred","autoGeneration","patientIdentifier","identifierToCreate","generateIdentifier","identifierType","addPatientIdentifier","updatePatientIdentifier","Error","deletePatientIdentifier","additionalNameUuid","address","getPatientAddressField","isEqual","person","names","getNames","gender","charAt","birthdate","birthdateEstimated","attributes","getPatientAttributes","addresses","getPatientDeathInfo","preferredNameUuid","givenName","middleName","familyName","addNameInLocalLanguage","push","additionalGivenName","additionalMiddleName","additionalFamilyName","section","attr","personAttributes","attributeType","value","Object","keys","reduce","memo","fieldName","isDead","deathDate","deathCause","dead","causeOfDeath","patient","M","F","O","U","birthDate","deceasedBoolean","deceasedDateTime","given","Boolean","family","city","cityVillage","country","postalCode","state","stateProvince","use","telecom","attribute","esmPatientRegistrationSchema","sections","_type","Type","_default","_description","_elements","sectionDefinitions","fields","join","demographics","contact","death","fieldDefinitions","label","placeholder","validation","required","matches","phone","fieldConfigurations","displayMiddleName","unidentifiedPatient","links","submitButton","_validators","validators","concepts","patientPhotoUuid","precacheStaticAssets","fetchCurrentSession","fetchAddressTemplate","fetchAllRelationshipTypes","fetchPatientIdentifierTypesWithSources","syncPatientRegistration","queuedPatient","options","savePatientFormOnline","abort","importTranslation","require","backendDependencies","frontendDependencies","process","resources","currentSession","addressTemplate","relationshipTypes","setupOpenMRS","featureName","defineConfigSchema","registerBreadcrumbs","path","window","spaBase","title","parent","setupOfflineSync","subscribePrecacheStaticDependencies","registerOfflinePatientHandler","fetchCurrentPatient","headers","pages","load","getAsyncLifecycle","route","online","savePatientForm","offline","savePatientFormOffline","extensions","slot","mockAutoGenerationOptionsResult","results","manualEntryEnabled","automaticGenerationEnabled","resourceVersion","ResourcesContext","React","cacheAndFetch","primaryIdentifierType","secondaryIdentifierTypes","fetchPrimaryIdentifierType","fetchSecondaryIdentifierTypes","identifierSources","autoGenOptions","fetchIdentifierSources","resolve","option","find","autoGenerationOption","primaryIdentifierTypeResponse","metadata","metadataUuid","camelCase","format","isPrimary","secondaryIdentifierTypeResponse","extraIdentifierTypesSetUuid","metadataResponse","type","setMember","url","messageOmrsServiceWorker","pattern","escapeRegExp","openmrsFetch","signal","updatePatientUuid","method","body","content","date","conceptUuid","formData","FormData","append","dataURI","byteString","atob","mimeString","buffer","Uint8Array","length","i","charCodeAt","blob","Blob","File","dataURItoFile","JSON","stringify","concept","groupMembers","obsDatetime","usePatientPhoto","useConfig","error","useSWR","item","imageSrc","uri","isError","isLoading","fetchPerson","query","identifierUuid","patientIdentifierUuid","webpackAsyncContext","req","__webpack_require__","o","then","e","code","ids","module","exports"],"sourceRoot":""}